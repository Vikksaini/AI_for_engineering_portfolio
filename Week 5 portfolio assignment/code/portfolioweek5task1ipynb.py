# -*- coding: utf-8 -*-
"""Portfolioweek5Task1ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bhonbuSmrPld7zS1G3yJfkE7A-_X1duk
"""

!pip install tensorflow keras
!pip install opencv-python

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2

from google.colab import drive
drive.mount('/content/drive')

import random
import shutil
import os

# Define the base path for the dataset
base_dir = '/content/drive/MyDrive/Corrosion'
rust_dir = os.path.join(base_dir, 'rust')
no_rust_dir = os.path.join(base_dir, 'no rust')

# Create directories for train and test sets
os.makedirs('/content/drive/MyDrive/Corrosion/train/rust', exist_ok=True)
os.makedirs('/content/drive/MyDrive/Corrosion/train/no rust', exist_ok=True)
os.makedirs('/content/drive/MyDrive/Corrosion/test/rust', exist_ok=True)
os.makedirs('/content/drive/MyDrive/Corrosion/test/no rust', exist_ok=True)

# List all images in each directory
rust_images = os.listdir(rust_dir)
no_rust_images = os.listdir(no_rust_dir)

# Randomly select 10 images each for the test set
test_rust = random.sample(rust_images, 10)
test_no_rust = random.sample(no_rust_images, 10)

# Copy images to the respective train and test directories
for img in rust_images:
    src_path = os.path.join(rust_dir, img)
    if img in test_rust:
        shutil.copy(src_path, '/content/drive/MyDrive/Corrosion/test/rust/')
    else:
        shutil.copy(src_path, '/content/drive/MyDrive/Corrosion/train/rust/')

for img in no_rust_images:
    src_path = os.path.join(no_rust_dir, img)
    if img in test_no_rust:
        shutil.copy(src_path, '/content/drive/MyDrive/Corrosion/test/no rust/')
    else:
        shutil.copy(src_path, '/content/drive/MyDrive/Corrosion/train/no rust/')

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Data generators
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

# Load data
train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Corrosion/train/',
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

test_generator = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/Corrosion/test/',
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

# Define the model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=max(1, train_generator.samples // 32), # Ensure steps_per_epoch is at least 1
    epochs=10,
    validation_data=test_generator,
    validation_steps=max(1, test_generator.samples // 32) # Ensure validation_steps is at least 1
)

# Evaluate the model
loss, accuracy = model.evaluate(test_generator)
print(f'Test Accuracy: {accuracy*100:.2f}%')

from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import Adam

# Load pre-trained ResNet50 model without the top layer
resnet_base = ResNet50(weights='imagenet', include_top=False, input_shape=(150, 150, 3))

# Freeze all layers of the ResNet50 base model
for layer in resnet_base.layers:
    layer.trainable = False

# Build the new model
resnet_model = Sequential([
    resnet_base,  # Add the ResNet50 base model
    Flatten(),  # Flatten the output of ResNet50
    Dense(128, activation='relu'),  # Add a fully connected layer
    Dense(1, activation='sigmoid')  # Output layer for binary classification
])

# Compile the model
resnet_model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])

# Summary of the model
resnet_model.summary()

# Train the model
history_resnet = resnet_model.fit(
    train_generator,
    steps_per_epoch=max(1, train_generator.samples // 32), # Ensure steps_per_epoch is at least 1
    epochs=10,  # Using 10 epochs as suggested
    validation_data=test_generator,
    validation_steps=max(1, test_generator.samples // 32) # Ensure validation_steps is at least 1
)

# Evaluate the ResNet50 model
loss, accuracy = resnet_model.evaluate(test_generator)
print(f'Test Accuracy with ResNet50: {accuracy * 100:.2f}%')

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Function to make predictions and visualize results
def visualize_predictions(model, generator, class_labels):
    # Reset the generator to start from the beginning
    generator.reset()

    # Get the filenames, true labels, and predictions
    filenames = generator.filenames
    true_labels = generator.classes
    predictions = model.predict(generator, steps=len(generator), verbose=1)
    predicted_labels = (predictions > 0.5).astype(int).flatten()  # Convert probabilities to binary labels

    # Create a table to display true vs. predicted labels
    results_df = pd.DataFrame({
        'Filename': filenames,
        'True Label': [class_labels[label] for label in true_labels],
        'Predicted Label': [class_labels[label] for label in predicted_labels]
    })

    # Calculate overall accuracy
    accuracy = np.mean(predicted_labels == true_labels)
    print(f'Overall Accuracy: {accuracy * 100:.2f}%')

    # Display the table
    print(results_df)

    # Visualize the first few images with their predictions
    for i in range(10):  # Display first 10 images as example
        img_path = os.path.join(generator.directory, filenames[i])
        img = plt.imread(img_path)

        plt.figure(figsize=(4, 4))
        plt.imshow(img)
        plt.title(f'True: {results_df["True Label"].iloc[i]}, Predicted: {results_df["Predicted Label"].iloc[i]}')
        plt.axis('off')
        plt.show()

    return results_df

# Class labels for the problem
class_labels = {0: 'no rust', 1: 'rust'}

# Predict and visualize results for CNN model
print("Results for CNN Model:")
cnn_results = visualize_predictions(model, test_generator, class_labels)

# Predict and visualize results for ResNet50 model
print("Results for ResNet50 Model:")
resnet_results = visualize_predictions(resnet_model, test_generator, class_labels)

# Save results to CSV files if needed
cnn_results.to_csv('cnn_test_results.csv', index=False)
resnet_results.to_csv('resnet50_test_results.csv', index=False)